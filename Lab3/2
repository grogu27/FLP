;gnu clisp  2.49.60

(defun check_el (item lst)
  (cond
    ((null lst) nil)
    ((equal item (car lst)) t)
    (t (check_el item (cdr lst)))))

(defun unionp (lst1 lst2)
  (cond
    ((null lst1) lst2)                     ; Если первый список пуст, вернуть второй список
    ((null lst2) lst1) 
    ((check_el (car lst1) lst2)             ; Если первый элемент первого списка уже есть во втором списке
             (unionp (cdr lst1) lst2))            ; Пропустить первый элемент и продолжить рекурсию
    (t (cons (car lst1)                    ; Добавить первый элемент к результату
             (unionp (cdr lst1) lst2)))))  ; Рекурсивный вызов для оставшейся части списка


(trace unionp)
(print (unionp '(q w e) '(r t y)))       
(print (unionp '(q w e r) '(t y)))        
(print (unionp '(q) '(w e r t y)))       
(print (unionp '() '(q w e r t y)))       
(print (unionp '(q w e r t y) '()))       

//////////////\\\\\\\____Best Decision____///////\\\\\\\\\\\\\

(defun member_s (x l)
  (cond
    ((null l) NIL)
    ((equal x (car l)) T)
    (t (member_s x (cdr l)))))

(defun union_s (set1 set2)
  (cond
    ((null set1) set2)  ; Если первое множество пустое, возвращаем второе множество
    ((member_s (car set1) set2)  ; Если первый элемент первого множества уже есть во втором
     (union_s (cdr set1) set2))  ; продолжаем с остальными элементами
    (t (cons (car set1) (union_s (cdr set1) set2)))))  ; Добавляем элемент к результату

(print (union_s '(1 2 3) '(3 4 5)))   ; Вернёт (1 2 3 4 5)
(print (union_s '(a b c) '(b c d)))   ; Вернёт (a b c d)
(print (union_s '(1 2 3) '(4 5 6)))   ; Вернёт (1 2 3 4 5 6)
(print (union_s '(1 2) '(2 3 4 5)))   ; Вернёт (1 2 3 4 5)
