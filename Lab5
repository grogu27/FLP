% Предикат для вывода нечётных чисел в порядке убывания
odd_numbers_descending :-
    write('Введите нижнюю границу диапазона: '),
    read(Lower),
    write('Введите верхнюю границу диапазона: '),
    read(Upper),
    print_odds(Upper, Lower).

print_odds(Current, Lower) :-
    Current >= Lower,
    Current mod 2 =\= 0,
    writeln(Current),
    Next is Current - 1,
    print_odds(Next, Lower).
print_odds(Current, Lower) :-
    Current >= Lower,
    Next is Current - 1,
    print_odds(Next, Lower).
print_odds(_, _).

% Предикат для нахождения чисел Фибоначчи
fibonacci :-
    repeat,
    write('Введите номер числа Фибоначчи: '),
    read(N),
    (N < 0, !; fibonacci_number(N, F), writeln(F), fail).

fibonacci_number(0, 1).
fibonacci_number(1, 1).
fibonacci_number(N, F) :-
    N > 1,
    N1 is N - 1,
    N2 is N - 2,
    fibonacci_number(N1, F1),
    fibonacci_number(N2, F2),
    F is F1 + F2.

% Предикат для разделения списка на три части
split_list :-
    write('Введите список: '),
    read(List),
    write('Введите первое число: '),
    read(A),
    write('Введите второе число: '),
    read(B),
    split(List, A, B, Less, Between, Greater),
    format('Меньше: ~w~n', [Less]),
    format('Между: ~w~n', [Between]),
    format('Больше: ~w~n', [Greater]).

split([], _, _, [], [], []).
split([H|T], A, B, [H|Less], Between, Greater) :-
    H < A,
    split(T, A, B, Less, Between, Greater).
split([H|T], A, B, Less, [H|Between], Greater) :-
    H >= A, H =< B,
    split(T, A, B, Less, Between, Greater).
split([H|T], A, B, Less, Between, [H|Greater]) :-
    H > B,
    split(T, A, B, Less, Between, Greater).

% Предикат для нахождения наиболее часто встречающихся элементов
most_frequent :-
    write('Введите список: '),
    read(List),
    frequency(List, FreqList),
    max_frequencies(FreqList, MaxFreq, Result),
    writeln(Result).

frequency([], []).
frequency([H|T], [(H, Freq)|FreqTail]) :-
    count_occurrences(H, [H|T], Freq),
    remove_all(H, T, NewTail),
    frequency(NewTail, FreqTail).

count_occurrences(_, [], 0).
count_occurrences(X, [X|T], Count) :-
    count_occurrences(X, T, Count1),
    Count is Count1 + 1.
count_occurrences(X, [_|T], Count) :-
    count_occurrences(X, T, Count).

remove_all(_, [], []).
remove_all(X, [X|T], Result) :-
    remove_all(X, T, Result).
remove_all(X, [H|T], [H|Result]) :-
    remove_all(X, T, Result).

max_frequencies([], 0, []).
max_frequencies([(H, F)|T], MaxFreq, [H|Result]) :-
    max_frequencies(T, MaxFreqTail, ResultTail),
    (F > MaxFreqTail -> MaxFreq = F, Result = [H]
    ; F == MaxFreqTail -> MaxFreq = MaxFreqTail, Result = [H|ResultTail]
    ; MaxFreq = MaxFreqTail, Result = ResultTail).
